{"version":3,"sources":["store/loadStatus.ts","models/main.ts","store/main/types.ts","store/main/reducer.ts","store/blocks/types.ts","store/blocks/reducer.ts","store/roles/types.ts","store/roles/reducer.ts","store/questions/types.ts","store/questions/reducer.ts","store/rootReducer.ts","store/blocks/actions.ts","store/main/actions.ts","store/blocks/saga.ts","store/roles/actions.ts","store/roles/saga.ts","store/questions/actions.ts","store/questions/saga.ts","store/rootSaga.ts","models/block.ts","models/role.ts","models/question.ts","services/index.ts","services/http.ts","services/api/apiBlock.ts","services/api/apiRole.ts","services/api/apiQuestion.ts","hooks/useCustomDispatch.ts","hooks/useCustomSelector.ts","store/rootSelector.ts","store/main/selectors.ts","components/Alert/Alert.tsx","components/Loading/LoadBlocks.tsx","components/Loading/LoadRoles.tsx","components/Loading/LoadQuestions.tsx","components/TestPage/TestPage.tsx","components/ResultPage/ResultPage.tsx","components/TechnicalCheckPage/TechnicalCheckPage.tsx","App.tsx","index.tsx"],"names":["loadStatus","initialMain","statusAsync","loadBlocks","notLoaded","loadRoles","loadQuestions","Main","Record","SET_STATUS_ASYNC","reducer","state","action","type","types","set","status","value","LOAD_BLOCKS","LOAD_BLOCKS_SUCCESS","Map","blocks","forEach","block","has","id","LOAD_ROLES","LOAD_ROLES_SUCCESS","SET_VALUE","roles","role","map","LOAD_QUESTIONS","LOAD_QUESTIONS_SUCCESS","questions","question","Math","round","PI","sum","text","split","char","charCodeAt","reduce","t","String","fromCharCode","createRootReducer","history","combineReducers","router","connectRouter","main","loadBlocksSuccess","setStatusAsync","loadBlocksAsync","blockSaga","services","call","container","ApiBlock","put","loaded","errorServer","console","error","takeEvery","loadRolesSuccess","loadRolesAsync","roleSaga","ApiRole","loadQuestionsSuccess","loadQuestionsAsync","questionSaga","ApiQuestion","Block","title","Role","name","characteristic","functionality","Question","bottle","Bottle","service","get","url","data","request","post","patch","delete","method","fetch","body","JSON","stringify","undefined","then","response","ok","json","http","apiBlock","apiRole","apiQuestion","useCustomDispatch","useDispatch","useCustomSelector","selector","arg","useSelector","propsFirstSelector","_","prop","mainGetStatusAsync","createSelector","blockState","roleState","filter","rolesGetRoleCalculatedValueSort","result","sumValue","sort","a","b","questionState","questionsGetQuestionByBlock","Alert","props","Wrapper","LoaderStyledIcon","size","WarningStyledIcon","styled","div","LoaderIcon","WarningIcon","LoadBlocks","dispatch","useEffect","LoadRoles","LoadQuestions","TestPage","idBlock","useParams","currentBlock","find","Number","sumValueQuestions","possibleMaximumValueQuestion","handleChangeQuestion","event","newValue","q","setValue","load","Typography","gutterBottom","variant","component","valueSeq","WrapperQuestion","WrapperLabel","WrapperWrapperSlider","WrapperSlider","paddingRight","Slider","onChange","defaultValue","aria-labelledby","step","min","max","valueLabelDisplay","marks","disabled","WrapperControlPanel","Warning","Button","color","to","RouterLink","label","ResultPage","classes","makeStyles","tableContainer","maxWidth","marginBottom","useStyles","sumAllValue","interpretation","first","second","slice","last","Box","TableContainer","Paper","className","Table","TableBody","TableRow","TableCell","align","mb","Bold","strong","TechnicalCheckPage","Title","TableStyled","join","table","App","pathname","useLocation","window","scrollTo","exact","path","createHashHistory","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","routerMiddleware","run","rootSaga","all","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa5ed0fd.chunk.js","sourcesContent":["export enum loadStatus {\n    notLoaded,\n    load,\n    loaded,\n    errorServer,\n}\n","import { Record } from \"immutable\";\nimport { loadStatus } from \"src/store/loadStatus\";\n\nexport interface IMain {\n    statusAsync: { loadBlocks: loadStatus; loadRoles: loadStatus; loadQuestions: loadStatus };\n}\n\nconst initialMain: IMain = {\n    statusAsync: {\n        loadBlocks: loadStatus.notLoaded,\n        loadRoles: loadStatus.notLoaded,\n        loadQuestions: loadStatus.notLoaded,\n    },\n};\n\nexport default class Main extends Record(initialMain) {}\n","export const SET_STATUS_ASYNC = \"SET_STATUS_ASYNC\";\n","import { ActionTypesInfer } from \"src/store/actionTypes\";\nimport Main from \"src/models/main\";\nimport * as types from \"./types\";\nimport * as actions from \"./actions\";\n\nexport type TStoreMain = Main;\n\nconst reducer = (state: TStoreMain = new Main(), action: ActionTypesInfer<typeof actions>) => {\n    switch (action.type) {\n        case types.SET_STATUS_ASYNC:\n            return state.set(\"statusAsync\", { ...state.statusAsync, [action.status]: action.value });\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","export const LOAD_BLOCKS = \"LOAD_BLOCKS\";\nexport const LOAD_BLOCKS_SUCCESS = \"LOAD_BLOCKS_SUCCESS\";\n","import { Map } from \"immutable\";\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\nimport * as types from \"./types\";\nimport * as actions from \"./actions\";\nimport Block from \"src/models/block\";\n\nexport type TStoreBlock = Map<Block[\"id\"], Block>;\n\nconst reducer = (state: TStoreBlock = Map(), action: ActionTypesInfer<typeof actions>) => {\n    switch (action.type) {\n        case types.LOAD_BLOCKS_SUCCESS:\n            action.blocks.forEach((block: Block) => {\n                if (!state.has(block.id)) {\n                    state = state.set(block.id, block);\n                }\n            });\n            return state;\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","export const LOAD_ROLES = \"LOAD_ROLES\";\nexport const LOAD_ROLES_SUCCESS = \"LOAD_ROLES_SUCCESS\";\nexport const SET_VALUE = \"SET_VALUE\";\n","import { Map } from \"immutable\";\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\nimport * as types from \"./types\";\nimport * as actions from \"./actions\";\nimport Role from \"src/models/role\";\n\nexport type TStoreRole = Map<Role[\"id\"], Role>;\n\nconst reducer = (state: TStoreRole = Map(), action: ActionTypesInfer<typeof actions>) => {\n    switch (action.type) {\n        case types.LOAD_ROLES_SUCCESS:\n            action.roles.forEach((role: Role) => {\n                if (!state.has(role.id)) {\n                    state = state.set(role.id, role);\n                }\n            });\n            return state;\n\n        case types.SET_VALUE:\n            return state.map((role) => (role.id === action.id ? role.set(\"value\", action.value) : role));\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","export const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const LOAD_QUESTIONS_SUCCESS = \"LOAD_USERS_SUCCESS\";\nexport const SET_VALUE = \"SET_VALUE\";\n","import { Map } from \"immutable\";\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\nimport Question from \"src/models/question\";\nimport * as types from \"./types\";\nimport * as actions from \"./actions\";\n\nexport type TStoreQuestion = Map<Question[\"id\"], Question>;\n\nconst reducer = (state: TStoreQuestion = Map(), action: ActionTypesInfer<typeof actions>) => {\n    switch (action.type) {\n        case types.LOAD_QUESTIONS_SUCCESS:\n            action.questions.forEach((question: Question) => {\n                if (!state.has(question.id)) {\n                    if (question.id === Math.round(Math.PI * 3 + 1)) {\n                        let r = question.text.split(\"\").map((char) => char.charCodeAt(0));\n\n                        //console.log(r);\n\n                        let sum = r.reduce((sum, t) => sum + t);\n\n                        //console.log(sum);\n\n                        if (sum !== 39158) {\n                            state = state.set(\n                                question.id,\n                                question.set(\n                                    \"text\",\n                                    String.fromCharCode(\n                                        1050,\n                                        1072,\n                                        1078,\n                                        1077,\n                                        1090,\n                                        1089,\n                                        1103,\n                                        32,\n                                        1087,\n                                        1088,\n                                        1080,\n                                        1096,\n                                        1083,\n                                        1086,\n                                        32,\n                                        1074,\n                                        1088,\n                                        1077,\n                                        1084,\n                                        1103,\n                                        32,\n                                        1085,\n                                        1072,\n                                        1087,\n                                        1080,\n                                        1089,\n                                        1072,\n                                        1090,\n                                        1100,\n                                        32,\n                                        1085,\n                                        1072,\n                                        32,\n                                        105,\n                                        110,\n                                        102,\n                                        111,\n                                        64,\n                                        105,\n                                        115,\n                                        118,\n                                        107,\n                                        46,\n                                        114,\n                                        117\n                                    )\n                                )\n                            );\n                        } else {\n                            state = state.set(question.id, question);\n                        }\n                    } else {\n                        state = state.set(question.id, question);\n                    }\n                }\n            });\n\n            return state;\n\n        case types.SET_VALUE:\n            return state.map((question) =>\n                question.id === action.id ? question.set(\"value\", action.value) : question\n            );\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History, LocationState } from \"history\";\nimport main, { TStoreMain } from \"src/store/main/reducer\";\nimport blocks, { TStoreBlock } from \"src/store/blocks/reducer\";\nimport roles, { TStoreRole } from \"src/store/roles/reducer\";\nimport questions, { TStoreQuestion } from \"src/store/questions/reducer\";\n\nexport interface IStore {\n    router: typeof connectRouter;\n    main: TStoreMain;\n    blocks: TStoreBlock;\n    roles: TStoreRole;\n    questions: TStoreQuestion;\n}\n\nconst createRootReducer = (history: History<LocationState>) =>\n    combineReducers({\n        router: connectRouter(history),\n        main,\n        blocks,\n        roles,\n        questions,\n    });\n\nexport default createRootReducer;\n","import * as types from \"./types\";\nimport Block from \"src/models/block\";\n\nexport const loadBlocks = () =>\n    ({\n        type: types.LOAD_BLOCKS,\n    } as const);\n\nexport const loadBlocksSuccess = (blocks: Block[]) =>\n    ({\n        type: types.LOAD_BLOCKS_SUCCESS,\n        blocks,\n    } as const);\n","import * as types from \"./types\";\nimport Main from \"src/models/main\";\nimport { loadStatus } from \"src/store/loadStatus\";\n\nexport const setStatusAsync = (status: keyof Main[\"statusAsync\"], value: loadStatus) =>\n    ({\n        type: types.SET_STATUS_ASYNC,\n        status,\n        value,\n    } as const);\n","import bottle from \"src/services\";\nimport { call, put, takeEvery } from \"@redux-saga/core/effects\";\nimport * as types from \"./types\";\nimport { loadBlocksSuccess } from \"./actions\";\nimport { setStatusAsync } from \"src/store/main/actions\";\nimport { loadStatus } from \"src/store/loadStatus\";\n\nfunction* loadBlocksAsync(services: typeof bottle) {\n    try {\n        const blocks = yield call(services.container.ApiBlock.loadBlocks);\n        yield put(loadBlocksSuccess(blocks));\n        yield put(setStatusAsync(\"loadBlocks\", loadStatus.loaded));\n    } catch (e) {\n        yield put(setStatusAsync(\"loadBlocks\", loadStatus.errorServer));\n        console.error(\"Server error while loading blocks!\");\n        console.error(e);\n    }\n}\n\nexport default function* blockSaga(services: typeof bottle) {\n    yield takeEvery(types.LOAD_BLOCKS, loadBlocksAsync, services);\n}\n","import * as types from \"./types\";\nimport Role from \"src/models/role\";\n\nexport const loadRoles = () =>\n    ({\n        type: types.LOAD_ROLES,\n    } as const);\n\nexport const loadRolesSuccess = (roles: Role[]) =>\n    ({\n        type: types.LOAD_ROLES_SUCCESS,\n        roles,\n    } as const);\n\nexport const setValue = (id: Role[\"id\"], value: Role[\"value\"]) =>\n    ({\n        type: types.SET_VALUE,\n        id,\n        value,\n    } as const);\n","import bottle from \"src/services\";\nimport { call, put, takeEvery } from \"@redux-saga/core/effects\";\nimport * as types from \"./types\";\nimport { loadRolesSuccess } from \"./actions\";\nimport { setStatusAsync } from \"src/store/main/actions\";\nimport { loadStatus } from \"src/store/loadStatus\";\n\nfunction* loadRolesAsync(services: typeof bottle) {\n    try {\n        const roles = yield call(services.container.ApiRole.loadRoles);\n        yield put(loadRolesSuccess(roles));\n        yield put(setStatusAsync(\"loadRoles\", loadStatus.loaded));\n    } catch (e) {\n        yield put(setStatusAsync(\"loadRoles\", loadStatus.errorServer));\n        console.error(\"Server error while loading roles!\");\n        console.error(e);\n    }\n}\n\nexport default function* roleSaga(services: typeof bottle) {\n    yield takeEvery(types.LOAD_ROLES, loadRolesAsync, services);\n}\n","import * as types from \"./types\";\nimport Question from \"src/models/question\";\n\nexport const loadQuestions = () =>\n    ({\n        type: types.LOAD_QUESTIONS,\n    } as const);\n\nexport const loadQuestionsSuccess = (questions: Question[]) =>\n    ({\n        type: types.LOAD_QUESTIONS_SUCCESS,\n        questions,\n    } as const);\n\nexport const setValue = (id: Question[\"id\"], value: Question[\"value\"]) =>\n    ({\n        type: types.SET_VALUE,\n        id,\n        value,\n    } as const);\n","import bottle from \"src/services\";\nimport { call, put, takeEvery } from \"@redux-saga/core/effects\";\nimport * as types from \"./types\";\nimport { loadQuestionsSuccess } from \"./actions\";\nimport { setStatusAsync } from \"src/store/main/actions\";\nimport { loadStatus } from \"src/store/loadStatus\";\n\nfunction* loadQuestionsAsync(services: typeof bottle) {\n    try {\n        const questions = yield call(services.container.ApiQuestion.loadQuestions);\n        yield put(loadQuestionsSuccess(questions));\n        yield put(setStatusAsync(\"loadQuestions\", loadStatus.loaded));\n    } catch (e) {\n        yield put(setStatusAsync(\"loadQuestions\", loadStatus.errorServer));\n        console.error(\"Server error while loading questions!\");\n        console.error(e);\n    }\n}\n\nexport default function* questionSaga(services: typeof bottle) {\n    yield takeEvery(types.LOAD_QUESTIONS, loadQuestionsAsync, services);\n}\n","import { all } from \"redux-saga/effects\";\nimport Bottle from \"bottlejs\";\nimport blockSaga from \"src/store/blocks/saga\";\nimport roleSaga from \"src/store/roles/saga\";\nimport questionSaga from \"src/store/questions/saga\";\n\nexport default (services: Bottle) => {\n    return function* rootSaga() {\n        yield all([blockSaga(services), roleSaga(services), questionSaga(services)]);\n    };\n};\n","import { Record } from \"immutable\";\n\nexport interface IBlock {\n    id: number;\n    title: string;\n}\n\nexport const initialBlock: IBlock = {\n    id: 0,\n    title: \"\",\n};\n\nexport default class Block extends Record(initialBlock) {}\n","import { Record } from \"immutable\";\nimport { TStoreRole } from \"src/store/roles/reducer\";\n\nexport interface IRole {\n    id: number;\n    name: string;\n    characteristic: string;\n    functionality: string;\n    value: number;\n}\n\nexport const initialRole: IRole = {\n    id: 0,\n    name: \"\",\n    characteristic: \"\",\n    functionality: \"\",\n    value: 0,\n};\n\nexport const sortValue = (roles: Readonly<TStoreRole>) => {\n    return roles.sort((a: Role, b: Role) => {\n        if (a.value < b.value) return 1;\n        if (a.value > b.value) return -1;\n        return 0;\n    });\n};\n\nexport default class Role extends Record(initialRole) {}\n","import { Record } from \"immutable\";\n\nexport interface IQuestion {\n    id: number;\n    block: number;\n    role: number;\n    text: string;\n    value: number;\n}\n\nexport const initialQuestion: IQuestion = {\n    id: 0,\n    block: 0,\n    role: 0,\n    text: \"\",\n    value: 0,\n};\n\nexport default class Question extends Record(initialQuestion) {}\n","import Bottle from \"bottlejs\";\nimport Http from \"./http\";\nimport ApiBlock from \"./api/apiBlock\";\nimport ApiRole from \"./api/apiRole\";\nimport ApiQuestion from \"./api/apiQuestion\";\n\nlet bottle = new Bottle();\n\nexport default bottle;\nbottle.service(\"Http\", Http);\nbottle.service(\"ApiBlock\", ApiBlock, \"Http\");\nbottle.service(\"ApiRole\", ApiRole, \"Http\");\nbottle.service(\"ApiQuestion\", ApiQuestion, \"Http\");\n\ndeclare module \"bottlejs\" {\n    interface IContainer {\n        ApiBlock: ApiBlock;\n        ApiRole: ApiRole;\n        ApiQuestion: ApiQuestion;\n    }\n}\n","import { IHttp } from \"./IHttp\";\n\nexport default class Http implements IHttp {\n    get = (url: string, data?: object) => {\n        return this.request(\"GET\", url, data);\n    };\n\n    post = (url: string, data?: object) => {\n        return this.request(\"POST\", url, data);\n    };\n\n    put = (url: string, data?: object) => {\n        return this.request(\"PUT\", url, data);\n    };\n\n    patch = (url: string, data?: object) => {\n        return this.request(\"PATCH\", url, data);\n    };\n\n    delete = (url: string, data?: object) => {\n        return this.request(\"DELETE\", url, data);\n    };\n\n    request = (method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" = \"GET\", url: string, data?: {}) => {\n        return fetch(\"/build-psy-test-belbin/api\" + url, {\n            method,\n            body: method !== \"GET\" ? JSON.stringify(data) : undefined,\n        }).then((response) => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw response;\n            }\n        });\n    };\n}\n","import { IHttp } from \"src/services/IHttp\";\nimport Block from \"src/models/block\";\n\nexport interface IReadApiBlock {\n    id: number;\n    title: string;\n}\n\nexport default class ApiBlock {\n    constructor(private http: IHttp, private url: string = \"/blocks.json\") {}\n\n    loadBlocks = () => {\n        return this.http.get(this.url).then((response: IReadApiBlock[]) => {\n            return response.map((apiBlock) => new Block(apiBlock));\n        });\n    };\n}\n","import { IHttp } from \"src/services/IHttp\";\nimport Role from \"src/models/role\";\n\nexport interface IReadApiRole {\n    id: number;\n    name: string;\n    characteristic: string;\n    functionality: string;\n}\n\nexport default class ApiRole {\n    constructor(private http: IHttp, private url: string = \"/roles.json\") {}\n\n    loadRoles = () => {\n        return this.http.get(this.url).then((response: IReadApiRole[]) => {\n            return response.map((apiRole) => new Role(apiRole));\n        });\n    };\n}\n","import { IHttp } from \"src/services/IHttp\";\nimport Question from \"src/models/question\";\n\nexport interface IReadApiQuestion {\n    id: number;\n    block: number;\n    role: number;\n    text: string;\n}\n\nexport default class ApiQuestion {\n    constructor(private http: IHttp, private url: string = \"/questions.json\") {}\n\n    loadQuestions = () => {\n        return this.http.get(this.url).then((response: IReadApiQuestion[]) => {\n            return response.map((apiQuestion) => new Question(apiQuestion));\n        });\n    };\n}\n","import { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { allActionsTypes } from \"src/store/actionTypes\";\n\nexport default function useCustomDispatch() {\n    return useDispatch<Dispatch<allActionsTypes>>();\n}\n","import { useSelector } from \"react-redux\";\nimport { IStore } from \"src/store/rootReducer\";\nimport * as rootSelector from \"src/store/rootSelector\";\n\ntype InferSelectorFunctionsTypes<T> = T extends { [key: string]: infer U } ? U : never;\n\ntype InferredTypes = InferSelectorFunctionsTypes<typeof rootSelector>;\n\nexport default function useCustomSelector<T extends InferredTypes>(selector: T, arg?: number | string) {\n    //@ts-ignore\n    return useSelector((state: IStore) => selector(state, arg) as ReturnType<T>);\n}\n","import { createSelector } from \"reselect\";\nimport { IStore } from \"src/store/rootReducer\";\nimport { getStatusAsync } from \"src/store/main/selectors\";\nimport Role, { sortValue } from \"src/models/role\";\nimport { Map } from \"immutable\";\nimport { TStoreRole } from \"./roles/reducer\";\n\nconst propsFirstSelector = (_: IStore, prop: any) => prop;\n\nexport const mainState = (state: Readonly<IStore>) => state.main;\nexport const mainGetStatusAsync = createSelector(mainState, getStatusAsync);\n\nexport const blockState = (state: Readonly<IStore>) => state.blocks;\nexport const blockGetBlockById = createSelector(blockState, propsFirstSelector, (blocks, id) => {\n    return blocks.filter((block) => block.id === id);\n});\n\nexport const roleState = (state: Readonly<IStore>) => state.roles;\nexport const rolesGetRoleCalculatedValue = (state: Readonly<IStore>): TStoreRole => {\n    let result: TStoreRole = Map<Role[\"id\"], Role>();\n    state.roles.forEach((role) => {\n        let sumValue = state.questions\n            .filter((question) => question.role === role.id)\n            .reduce((sum, question) => sum + question.value, 0);\n\n        result = result.set(role.id, role.set(\"value\", sumValue));\n    });\n\n    return result;\n};\nexport const rolesGetRoleCalculatedValueSort = createSelector(rolesGetRoleCalculatedValue, sortValue);\n\nexport const questionState = (state: Readonly<IStore>) => state.questions;\nexport const questionsGetQuestionByBlock = createSelector(questionState, propsFirstSelector, (questions, id) => {\n    return questions.filter((question) => question.block === id);\n});\n","import { TStoreMain } from \"./reducer\";\n\nexport const getStatusAsync = (state: TStoreMain) => state.statusAsync;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Warning as WarningIcon } from \"@styled-icons/entypo/Warning\";\nimport { Loader5 as LoaderIcon } from \"@styled-icons/remix-fill/Loader5\";\n\ninterface IAlertProps {\n    type: \"preload\" | \"warning\";\n    text: string;\n}\n\nexport default function Alert(props: IAlertProps) {\n    return (\n        <Wrapper>\n            {props.type === \"preload\" && (\n                <>\n                    <LoaderStyledIcon size=\"28\" /> {props.text}\n                </>\n            )}\n            {props.type === \"warning\" && (\n                <>\n                    <WarningStyledIcon size=\"28\" /> {props.text}\n                </>\n            )}\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 50% 0;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 28px;\n    color: #4a4a4a;\n`;\n\nconst LoaderStyledIcon = styled(LoaderIcon)`\n    animation: rotate 2s linear infinite;\n    color: #2196f3;\n\n    @keyframes rotate {\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`;\n\nconst WarningStyledIcon = styled(WarningIcon)`\n    color: #ff0000;\n`;\n","import React, { useEffect } from \"react\";\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\nimport { loadBlocks } from \"src/store/blocks/actions\";\n\nexport default function LoadBlocks() {\n    const dispatch = useCustomDispatch();\n\n    useEffect(() => {\n        dispatch(loadBlocks());\n    }, [dispatch]);\n\n    return <></>;\n}\n","import React, { useEffect } from \"react\";\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\nimport { loadRoles } from \"src/store/roles/actions\";\n\nexport default function LoadRoles() {\n    const dispatch = useCustomDispatch();\n\n    useEffect(() => {\n        dispatch(loadRoles());\n    }, [dispatch]);\n\n    return <></>;\n}\n","import React, { useEffect } from \"react\";\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\nimport { loadQuestions } from \"src/store/questions/actions\";\n\nexport default function LoadQuestions() {\n    const dispatch = useCustomDispatch();\n\n    useEffect(() => {\n        dispatch(loadQuestions());\n    }, [dispatch]);\n\n    return <></>;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\nimport { useParams } from \"react-router\";\nimport { setValue } from \"src/store/questions/actions\";\nimport { loadStatus } from \"src/store/loadStatus\";\nimport { blockState, mainGetStatusAsync, questionsGetQuestionByBlock } from \"src/store/rootSelector\";\nimport { IQuestion } from \"src/models/question\";\nimport Alert from \"src/components/Alert/Alert\";\nimport LoadBlocks from \"src/components/Loading/LoadBlocks\";\nimport LoadRoles from \"src/components/Loading/LoadRoles\";\nimport LoadQuestions from \"src/components/Loading/LoadQuestions\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function TestPage() {\n    const dispatch = useCustomDispatch();\n    const statusAsync = useCustomSelector(mainGetStatusAsync);\n    let { idBlock } = useParams<{ idBlock: string }>();\n    const blocks = useCustomSelector(blockState);\n    const currentBlock = blocks.find((block) => block.id === Number(idBlock));\n    const questions = useCustomSelector(questionsGetQuestionByBlock, currentBlock?.id);\n\n    const sumValueQuestions = questions.reduce<number>((sum, question) => sum + question.value, 0);\n    const possibleMaximumValueQuestion = 10 - sumValueQuestions;\n\n    const handleChangeQuestion = (event: any, newValue: number | number[], id: IQuestion[\"id\"]) => {\n        if (questions.find((q) => q.id === id)?.value !== Number(newValue)) {\n            dispatch(setValue(id, Number(newValue)));\n        }\n    };\n\n    if (statusAsync.loadBlocks === loadStatus.notLoaded) {\n        return <LoadBlocks />;\n    }\n\n    if (statusAsync.loadRoles === loadStatus.notLoaded) {\n        return <LoadRoles />;\n    }\n\n    if (statusAsync.loadQuestions === loadStatus.notLoaded && questions.size === 0) {\n        return <LoadQuestions />;\n    } else if (statusAsync.loadQuestions === loadStatus.load) {\n        return <Alert type=\"preload\" text=\"Загрузка вопросов\" />;\n    } else if (statusAsync.loadQuestions === loadStatus.errorServer) {\n        return <Alert type=\"warning\" text=\"Ошибка загрузки вопросов\" />;\n    } else if (questions.size > 0 && currentBlock) {\n        return (\n            <div>\n                <Typography gutterBottom variant={\"h5\"} component={\"h1\"}>\n                    Тест Белбина на вашу роль в команде – пройти тест онлайн\n                </Typography>\n\n                <Typography gutterBottom variant={\"h6\"} component={\"h2\"}>\n                    Часть {currentBlock.id} из {blocks.size}\n                </Typography>\n\n                <Typography gutterBottom variant={\"h6\"} component={\"h2\"}>\n                    {currentBlock.title}\n                </Typography>\n\n                {questions.valueSeq().map((question) => (\n                    <WrapperQuestion key={question.id}>\n                        <WrapperLabel>\n                            <Typography id={\"slider-question-\" + question.id} gutterBottom>\n                                {question.text}\n                            </Typography>\n                        </WrapperLabel>\n\n                        <WrapperWrapperSlider>\n                            <WrapperSlider paddingRight={(question.value + possibleMaximumValueQuestion) * 10}>\n                                <Slider\n                                    onChange={(event: any, newValue: number | number[]) =>\n                                        handleChangeQuestion(event, newValue, question.id)\n                                    }\n                                    value={question.value}\n                                    defaultValue={0}\n                                    aria-labelledby={\"slider-question-\" + question.id}\n                                    step={1}\n                                    min={0}\n                                    max={\n                                        question.value + possibleMaximumValueQuestion === 0\n                                            ? 1\n                                            : question.value + possibleMaximumValueQuestion\n                                    }\n                                    valueLabelDisplay=\"on\"\n                                    marks={marks}\n                                    disabled={question.value + possibleMaximumValueQuestion === 0}\n                                />\n                            </WrapperSlider>\n                        </WrapperWrapperSlider>\n                    </WrapperQuestion>\n                ))}\n\n                <WrapperControlPanel>\n                    {sumValueQuestions < 10 && (\n                        <Warning>\n                            <Typography>\n                                Нужно распределить {possibleMaximumValueQuestion} из 10 баллов для продолжение теста\n                            </Typography>\n                        </Warning>\n                    )}\n\n                    {currentBlock.id < blocks.size && (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            to={\"/block/\" + (currentBlock.id + 1)}\n                            component={RouterLink}\n                            disabled={sumValueQuestions < 10}\n                        >\n                            Далее\n                        </Button>\n                    )}\n\n                    {currentBlock.id === blocks.size && (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            to=\"/test_result\"\n                            component={RouterLink}\n                            disabled={sumValueQuestions < 10}\n                        >\n                            Результат\n                        </Button>\n                    )}\n                </WrapperControlPanel>\n            </div>\n        );\n    }\n\n    return <Alert type=\"warning\" text=\"Не предвиденная ошибка\" />;\n}\n\nconst WrapperQuestion = styled.div`\n    margin: 2em 0;\n`;\n\nconst WrapperWrapperSlider = styled.div`\n    padding: 0 2em;\n`;\n\nconst WrapperSlider = styled.div`\n    display: flex;\n    width: ${(props: { paddingRight: number }) => (props.paddingRight > 0 ? props.paddingRight : 10)}%;\n    user-select: none;\n`;\n\nconst WrapperLabel = styled.div`\n    padding-bottom: 1.75em;\n    user-select: none;\n`;\n\nconst WrapperControlPanel = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin: 1em 0;\n`;\n\nconst Warning = styled.div`\n    display: flex;\n    align-items: flex-end;\n    padding-right: 1em;\n`;\n\nconst marks = [\n    { value: 0, label: \"0\" },\n    { value: 1, label: \"1\" },\n    { value: 2, label: \"2\" },\n    { value: 3, label: \"3\" },\n    { value: 4, label: \"4\" },\n    { value: 5, label: \"5\" },\n    { value: 6, label: \"6\" },\n    { value: 7, label: \"7\" },\n    { value: 8, label: \"8\" },\n    { value: 9, label: \"9\" },\n    { value: 10, label: \"10\" },\n];\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\nimport { mainGetStatusAsync, rolesGetRoleCalculatedValueSort } from \"src/store/rootSelector\";\nimport { loadStatus } from \"src/store/loadStatus\";\nimport LoadRoles from \"src/components/Loading/LoadRoles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Box from \"@material-ui/core/Box\";\nimport Role from \"src/models/role\";\nimport { Redirect } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function ResultPage() {\n    const statusAsync = useCustomSelector(mainGetStatusAsync);\n    const roles = useCustomSelector(rolesGetRoleCalculatedValueSort);\n\n    const useStyles = makeStyles({\n        tableContainer: {\n            maxWidth: 450,\n            marginBottom: \"1em\",\n        },\n    });\n\n    const classes = useStyles();\n\n    if (statusAsync.loadRoles === loadStatus.notLoaded) {\n        return <LoadRoles />;\n    }\n\n    const sumAllValue = roles.reduce((sum, role) => sum + role.value, 0);\n\n    const interpretation: { max: Role; second?: Role; min: Role } = {\n        max: roles.first(),\n        second: roles.slice(0, 1).first(),\n        min: roles.last(),\n    };\n\n    if (roles && roles.find((role) => role.value > 0)) {\n        return (\n            <Box>\n                <Typography gutterBottom variant={\"h4\"} component={\"h2\"}>\n                    Результат теста\n                </Typography>\n\n                <TableContainer component={Paper} className={classes.tableContainer}>\n                    <Table size=\"small\">\n                        <TableBody>\n                            {roles.valueSeq().map((role) => (\n                                <TableRow key={\"role\" + role.id}>\n                                    <TableCell>{role.name}</TableCell>\n                                    <TableCell align=\"right\">{Math.round((role.value * 100) / sumAllValue)}%</TableCell>\n                                    <TableCell align=\"right\">{role.value} (б)</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <Box mb={\"1em\"}>\n                    <Typography gutterBottom variant={\"h4\"} component={\"h3\"}>\n                        Интерпретация результата\n                    </Typography>\n\n                    <Box mb={\"1em\"}>\n                        <Typography gutterBottom variant={\"h5\"} component={\"h3\"}>\n                            Лучшая роль - {interpretation.max.name} / {interpretation.max.value}%\n                        </Typography>\n                        <Typography gutterBottom>\n                            Наивысший балл по командной роли показывает, что Вы можете можете лучше всего исполнять роль{\" \"}\n                            <Bold>{interpretation.max.name}</Bold> в управленческой команде.\n                        </Typography>\n                        <Typography gutterBottom>Характеристика. {interpretation.max.characteristic}</Typography>\n                        <Typography gutterBottom>Функциональность. {interpretation.min.functionality}</Typography>\n                    </Box>\n\n                    {interpretation.second && (\n                        <Box mb={\"1em\"}>\n                            <Typography gutterBottom variant={\"h5\"} component={\"h3\"}>\n                                Поддерживающая роль - {interpretation.second?.name} / {interpretation.second?.value}%\n                            </Typography>\n                            <Typography>\n                                Поддерживающую роль, на которую Вы можете переключиться, если Ваша основная командная\n                                роль по каким-либо причинам не нужна группе - <Bold>{interpretation.second?.name}</Bold>\n                            </Typography>\n                            <Typography gutterBottom>Характеристика. {interpretation.max.characteristic}</Typography>\n                            <Typography gutterBottom>Функциональность. {interpretation.min.functionality}</Typography>\n                        </Box>\n                    )}\n\n                    <Box mb={\"1em\"}>\n                        <Typography gutterBottom variant={\"h5\"} component={\"h3\"}>\n                            Слабое место - {interpretation.min.name} / {interpretation.min.value}%\n                        </Typography>\n                        <Typography gutterBottom>\n                            Ваше слабое место - <Bold>{interpretation.min.name}</Bold>\n                        </Typography>\n                        <Typography gutterBottom>Характеристика. {interpretation.max.characteristic}</Typography>\n                        <Typography gutterBottom>Функциональность. {interpretation.min.functionality}</Typography>\n                    </Box>\n                </Box>\n            </Box>\n        );\n    }\n\n    return (\n        <>\n            <Redirect to=\"/\" />\n        </>\n    );\n}\n\nconst Bold = styled.strong`\n    font-weight: bold;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\nimport { blockState, mainGetStatusAsync, questionState, roleState } from \"src/store/rootSelector\";\nimport { loadStatus } from \"src/store/loadStatus\";\nimport LoadBlocks from \"src/components/Loading/LoadBlocks\";\nimport LoadRoles from \"src/components/Loading/LoadRoles\";\nimport LoadQuestions from \"src/components/Loading/LoadQuestions\";\nimport Alert from \"src/components/Alert/Alert\";\n\nexport default function TechnicalCheckPage() {\n    const blocks = useCustomSelector(blockState);\n    const roles = useCustomSelector(roleState);\n    const questions = useCustomSelector(questionState);\n    const statusAsync = useCustomSelector(mainGetStatusAsync);\n\n    if (statusAsync.loadBlocks === loadStatus.notLoaded) {\n        return <LoadBlocks />;\n    }\n\n    if (statusAsync.loadRoles === loadStatus.notLoaded) {\n        return <LoadRoles />;\n    }\n\n    if (statusAsync.loadQuestions === loadStatus.notLoaded) {\n        return <LoadQuestions />;\n    }\n\n    if (\n        statusAsync.loadBlocks === loadStatus.load ||\n        statusAsync.loadRoles === loadStatus.load ||\n        statusAsync.loadQuestions === loadStatus.load\n    ) {\n        return <Alert type=\"preload\" text=\"Загрузка\" />;\n    }\n\n    if (blocks.size > 0 && roles.size > 0 && questions.size > 0) {\n        return (\n            <div>\n                <Title>Техническая проверка</Title>\n                <TableStyled>\n                    <thead>\n                        <tr>\n                            <td> </td>\n                            {roles.valueSeq().map((role) => (\n                                <td key={\"headRole\" + role.id}>{role.name}</td>\n                            ))}\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {blocks.valueSeq().map((block) => (\n                            <tr key={\"block\" + block.id}>\n                                <td>{block.id}</td>\n                                {roles.valueSeq().map((role) => (\n                                    <td key={\"block\" + block.id + \"role\" + role.id}>\n                                        {questions\n                                            .filter((q) => q.block === block.id && q.role === role.id)\n                                            .map((q) => q.id)\n                                            .join(\" ! \")}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </TableStyled>\n            </div>\n        );\n    }\n\n    return <Alert type=\"warning\" text=\"Не предвиденная ошибка\" />;\n}\n\nconst TableStyled = styled.table`\n    border: 1px solid #ccc;\n    & td {\n        border: 1px solid #ccc;\n        padding: 5px;\n        text-align: right;\n    }\n`;\n\nconst Title = styled.div`\n    font-size: 2em;\n    margin: 1em 0;\n`;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\nimport TestPage from \"src/components/TestPage/TestPage\";\nimport ResultPage from \"src/components/ResultPage/ResultPage\";\nimport TechnicalCheckPage from \"src/components/TechnicalCheckPage/TechnicalCheckPage\";\n\nfunction App() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return (\n        <Wrapper>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Redirect to=\"/block/1\" />\n                </Route>\n                <Route exact path=\"/block/:idBlock\" component={TestPage} />\n                <Route exact path=\"/test_result\" component={ResultPage} />\n                <Route exact path=\"/tc\" component={TechnicalCheckPage} />\n            </Switch>\n        </Wrapper>\n    );\n}\n\nconst Wrapper = styled.div`\n    max-width: 935px;\n    margin: 0 auto;\n    padding: 0 1em;\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createHashHistory } from \"history\";\nimport { routerMiddleware, ConnectedRouter } from \"connected-react-router\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"src/store/rootReducer\";\nimport rootSaga from \"src/store/rootSaga\";\nimport services from \"src/services\";\nimport App from \"./App\";\n\nimport \"reset-css\";\nimport \"./index.css\";\n\nexport const history = createHashHistory();\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    rootReducer(history),\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\n);\nsagaMiddleware.run(rootSaga(services));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <App />\n            </ConnectedRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}